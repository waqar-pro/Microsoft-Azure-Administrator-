Lab 6: Monitoring & Operations with Azure Monitor and Log Analytics
Objectives
By the end of this lab, students will be able to:

• Understand the fundamentals of monitoring and observability in cloud environments • Set up and configure Azure Monitor for comprehensive system monitoring • Create custom dashboards to visualize system metrics and performance data • Configure automated alerts for proactive system monitoring • Use Azure Log Analytics to query and analyze log data for troubleshooting • Implement best practices for monitoring and operations in Azure environments • Troubleshoot common issues using log analysis and monitoring tools

Prerequisites
Before starting this lab, students should have:

• Basic understanding of cloud computing concepts • Familiarity with Azure portal navigation • Basic knowledge of Linux command line operations • Understanding of web applications and system metrics • No prior experience with monitoring tools required - we'll cover everything step by step

Ready-to-Use Cloud Machines
Al Nafi provides pre-configured Linux-based cloud machines for this lab. Simply click Start Lab to access your environment. No need to build or configure your own virtual machine - everything is ready to use!

Your lab environment includes: • Azure CLI pre-installed and configured • Sample applications for monitoring • All necessary tools and dependencies • Internet connectivity for Azure services

Task 1: Set up Azure Monitor and Create Custom Dashboards
Subtask 1.1: Understanding Azure Monitor Architecture
Azure Monitor is like having a security guard who watches over your entire building (your cloud infrastructure). It collects data from various sources and helps you understand what's happening in your systems.

Key Components: • Metrics: Numerical data about system performance (like CPU usage) • Logs: Detailed records of what happened and when • Alerts: Notifications when something needs attention • Dashboards: Visual displays of your system's health

Subtask 1.2: Access Your Azure Environment
Connect to your lab machine:

# Your lab machine is already configured with Azure CLI
# Verify the installation
az --version
Login to Azure:

# Login to your Azure account
az login

# If you're using the lab environment, use device code authentication
az login --use-device-code
Set your subscription:

# List available subscriptions
az account list --output table

# Set the subscription you want to use
az account set --subscription "your-subscription-id"
Subtask 1.3: Create a Resource Group for Monitoring
Think of a resource group as a folder where you organize related items. We'll create one specifically for our monitoring resources.

# Create a resource group for our monitoring lab
az group create \
    --name "monitoring-lab-rg" \
    --location "East US"

# Verify the resource group was created
az group show --name "monitoring-lab-rg" --output table
Subtask 1.4: Deploy Sample Applications to Monitor
We'll deploy a simple web application that we can monitor. This is like setting up a store before installing security cameras.

Create an App Service Plan:

# Create an app service plan (like reserving space for your store)
az appservice plan create \
    --name "monitoring-lab-plan" \
    --resource-group "monitoring-lab-rg" \
    --sku B1 \
    --is-linux
Create a Web App:

# Create a web application
az webapp create \
    --name "monitoring-lab-app-$(date +%s)" \
    --resource-group "monitoring-lab-rg" \
    --plan "monitoring-lab-plan" \
    --runtime "NODE|18-lts"

# Store the app name for later use
APP_NAME=$(az webapp list --resource-group "monitoring-lab-rg" --query "[0].name" -o tsv)
echo "Your app name is: $APP_NAME"
Deploy sample code:

# Create a simple Node.js application
mkdir sample-app && cd sample-app

# Create package.json
cat > package.json << 'EOF'
{
  "name": "monitoring-sample",
  "version": "1.0.0",
  "description": "Sample app for monitoring lab",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.18.0"
  }
}
EOF

# Create server.js
cat > server.js << 'EOF'
const express = require('express');
const app = express();
const port = process.env.PORT || 8080;

let requestCount = 0;

app.get('/', (req, res) => {
  requestCount++;
  console.log(`Request ${requestCount} received at ${new Date()}`);
  res.json({
    message: 'Hello from Monitoring Lab!',
    timestamp: new Date(),
    requestCount: requestCount
  });
});

app.get('/health', (req, res) => {
  res.json({ status: 'healthy', uptime: process.uptime() });
});

app.get('/load', (req, res) => {
  // Simulate some CPU load
  const start = Date.now();
  while (Date.now() - start < 1000) {
    Math.random();
  }
  res.json({ message: 'Load test completed' });
});

app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});
EOF

# Create deployment package
zip -r app.zip .

# Deploy to Azure
az webapp deployment source config-zip \
    --resource-group "monitoring-lab-rg" \
    --name "$APP_NAME" \
    --src app.zip
Subtask 1.5: Enable Application Insights
Application Insights is like having a detailed diary of everything your application does.

# Create Application Insights resource
az monitor app-insights component create \
    --app "monitoring-lab-insights" \
    --location "East US" \
    --resource-group "monitoring-lab-rg" \
    --application-type web

# Get the instrumentation key
INSTRUMENTATION_KEY=$(az monitor app-insights component show \
    --app "monitoring-lab-insights" \
    --resource-group "monitoring-lab-rg" \
    --query "instrumentationKey" -o tsv)

echo "Instrumentation Key: $INSTRUMENTATION_KEY"

# Configure the web app to use Application Insights
az webapp config appsettings set \
    --resource-group "monitoring-lab-rg" \
    --name "$APP_NAME" \
    --settings APPINSIGHTS_INSTRUMENTATIONKEY="$INSTRUMENTATION_KEY"
Subtask 1.6: Create Custom Dashboard
Now we'll create a dashboard - think of it as a control panel that shows all the important information about your systems at a glance.

Create dashboard configuration file:

# Create dashboard JSON configuration
cat > dashboard.json << 'EOF'
{
  "lenses": {
    "0": {
      "order": 0,
      "parts": {
        "0": {
          "position": {
            "x": 0,
            "y": 0,
            "colSpan": 6,
            "rowSpan": 4
          },
          "metadata": {
            "inputs": [
              {
                "name": "resourceTypeMode",
                "isOptional": true
              },
              {
                "name": "ComponentId",
                "isOptional": true
              }
            ],
            "type": "Extension/HubsExtension/PartType/MonitorChartPart"
          }
        }
      }
    }
  },
  "metadata": {
    "model": {
      "timeRange": {
        "value": {
          "relative": {
            "duration": 24,
            "timeUnit": 1
          }
        },
        "type": "MsPortalFx.Composition.Configuration.ValueTypes.TimeRange"
      }
    }
  }
}
EOF
Create the dashboard using Azure CLI:

# Create a custom dashboard
az portal dashboard create \
    --resource-group "monitoring-lab-rg" \
    --name "monitoring-lab-dashboard" \
    --input-path dashboard.json \
    --location "East US"
Subtask 1.7: Generate Sample Traffic
Let's create some activity for our monitoring system to track:

# Get the web app URL
APP_URL=$(az webapp show --resource-group "monitoring-lab-rg" --name "$APP_NAME" --query "defaultHostName" -o tsv)
echo "App URL: https://$APP_URL"

# Generate sample traffic
for i in {1..20}; do
    echo "Making request $i..."
    curl -s "https://$APP_URL" > /dev/null
    curl -s "https://$APP_URL/health" > /dev/null
    if [ $((i % 5)) -eq 0 ]; then
        curl -s "https://$APP_URL/load" > /dev/null
    fi
    sleep 2
done

echo "Sample traffic generated!"
Task 2: Configure Alerts and Query Logs using Azure Log Analytics
Subtask 2.1: Create Log Analytics Workspace
A Log Analytics workspace is like a central library where all your system logs are stored and organized.

# Create Log Analytics workspace
az monitor log-analytics workspace create \
    --resource-group "monitoring-lab-rg" \
    --workspace-name "monitoring-lab-workspace" \
    --location "East US"

# Get workspace ID for later use
WORKSPACE_ID=$(az monitor log-analytics workspace show \
    --resource-group "monitoring-lab-rg" \
    --workspace-name "monitoring-lab-workspace" \
    --query "customerId" -o tsv)

echo "Workspace ID: $WORKSPACE_ID"
Subtask 2.2: Connect Application Insights to Log Analytics
# Link Application Insights to Log Analytics workspace
az monitor app-insights component linked-storage link \
    --app "monitoring-lab-insights" \
    --resource-group "monitoring-lab-rg" \
    --storage-account-id "/subscriptions/$(az account show --query id -o tsv)/resourceGroups/monitoring-lab-rg/providers/Microsoft.OperationalInsights/workspaces/monitoring-lab-workspace"
Subtask 2.3: Create Sample Log Queries
Now we'll learn how to search through our logs to find specific information. Think of this like searching through a diary to find entries about specific events.

Create a script to run common queries:

# Create query script
cat > log-queries.sh << 'EOF'
#!/bin/bash

WORKSPACE_ID="$1"

if [ -z "$WORKSPACE_ID" ]; then
    echo "Usage: $0 <workspace-id>"
    exit 1
fi

echo "Running sample Log Analytics queries..."

# Query 1: Get recent requests
echo "=== Recent Requests ==="
az monitor log-analytics query \
    --workspace "$WORKSPACE_ID" \
    --analytics-query "requests | take 10 | project timestamp, name, url, success, resultCode"

# Query 2: Count requests by result code
echo "=== Request Count by Result Code ==="
az monitor log-analytics query \
    --workspace "$WORKSPACE_ID" \
    --analytics-query "requests | summarize count() by resultCode | order by count_ desc"

# Query 3: Average response time
echo "=== Average Response Time ==="
az monitor log-analytics query \
    --workspace "$WORKSPACE_ID" \
    --analytics-query "requests | summarize avg(duration) by bin(timestamp, 5m) | order by timestamp desc"

# Query 4: Failed requests
echo "=== Failed Requests ==="
az monitor log-analytics query \
    --workspace "$WORKSPACE_ID" \
    --analytics-query "requests | where success == false | project timestamp, name, url, resultCode"

EOF

chmod +x log-queries.sh
Run the queries:

# Wait a few minutes for data to be collected, then run queries
echo "Waiting for data collection..."
sleep 300  # Wait 5 minutes

./log-queries.sh "$WORKSPACE_ID"
Subtask 2.4: Create Custom Metrics and Alerts
Alerts are like smoke detectors - they notify you when something needs your attention.

Create an alert rule for high response time:

# Create action group (who gets notified)
az monitor action-group create \
    --resource-group "monitoring-lab-rg" \
    --name "monitoring-lab-alerts" \
    --short-name "MonitorLab"

# Create alert rule for high response time
az monitor metrics alert create \
    --name "high-response-time" \
    --resource-group "monitoring-lab-rg" \
    --scopes "/subscriptions/$(az account show --query id -o tsv)/resourceGroups/monitoring-lab-rg/providers/Microsoft.Web/sites/$APP_NAME" \
    --condition "avg HttpResponseTime > 1000" \
    --description "Alert when average response time exceeds 1 second" \
    --evaluation-frequency 1m \
    --window-size 5m \
    --severity 2 \
    --action "monitoring-lab-alerts"
Create an alert for failed requests:

# Create alert for failed requests
az monitor metrics alert create \
    --name "failed-requests" \
    --resource-group "monitoring-lab-rg" \
    --scopes "/subscriptions/$(az account show --query id -o tsv)/resourceGroups/monitoring-lab-rg/providers/Microsoft.Web/sites/$APP_NAME" \
    --condition "total Http4xx > 5" \
    --description "Alert when there are more than 5 failed requests" \
    --evaluation-frequency 1m \
    --window-size 5m \
    --severity 3 \
    --action "monitoring-lab-alerts"
Subtask 2.5: Advanced Log Analytics Queries
Let's learn some more sophisticated ways to analyze our data:

# Create advanced queries script
cat > advanced-queries.sh << 'EOF'
#!/bin/bash

WORKSPACE_ID="$1"

if [ -z "$WORKSPACE_ID" ]; then
    echo "Usage: $0 <workspace-id>"
    exit 1
fi

echo "Running advanced Log Analytics queries..."

# Query 1: Performance trend analysis
echo "=== Performance Trend Analysis ==="
az monitor log-analytics query \
    --workspace "$WORKSPACE_ID" \
    --analytics-query "requests 
    | where timestamp > ago(1h) 
    | summarize 
        avg_duration = avg(duration),
        request_count = count(),
        success_rate = (count(success == true) * 100.0) / count()
    by bin(timestamp, 10m) 
    | order by timestamp desc"

# Query 2: Top slowest requests
echo "=== Top 10 Slowest Requests ==="
az monitor log-analytics query \
    --workspace "$WORKSPACE_ID" \
    --analytics-query "requests 
    | top 10 by duration desc 
    | project timestamp, name, url, duration, resultCode"

# Query 3: Error analysis
echo "=== Error Analysis ==="
az monitor log-analytics query \
    --workspace "$WORKSPACE_ID" \
    --analytics-query "requests 
    | where success == false 
    | summarize error_count = count() by resultCode, name 
    | order by error_count desc"

# Query 4: User activity patterns
echo "=== User Activity Patterns ==="
az monitor log-analytics query \
    --workspace "$WORKSPACE_ID" \
    --analytics-query "requests 
    | summarize requests_per_hour = count() by bin(timestamp, 1h) 
    | order by timestamp desc"

EOF

chmod +x advanced-queries.sh
Subtask 2.6: Create Custom Workbook for Monitoring
Workbooks are like interactive reports that help you understand your data better:

# Create workbook template
cat > workbook-template.json << 'EOF'
{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 1,
      "content": {
        "json": "# Monitoring Lab Dashboard\n\nThis workbook provides insights into our sample application performance."
      },
      "name": "text - 0"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "requests\n| where timestamp > ago(1h)\n| summarize count() by bin(timestamp, 5m)\n| render timechart",
        "size": 0,
        "title": "Request Volume Over Time",
        "queryType": 0,
        "resourceType": "microsoft.insights/components"
      },
      "name": "query - 1"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "requests\n| where timestamp > ago(1h)\n| summarize avg(duration) by bin(timestamp, 5m)\n| render timechart",
        "size": 0,
        "title": "Average Response Time",
        "queryType": 0,
        "resourceType": "microsoft.insights/components"
      },
      "name": "query - 2"
    }
  ],
  "isLocked": false,
  "fallbackResourceIds": []
}
EOF

echo "Workbook template created. You can import this into Azure Monitor Workbooks."
Subtask 2.7: Test Alert System
Let's trigger our alerts to see how they work:

# Create load test to trigger alerts
cat > load-test.sh << 'EOF'
#!/bin/bash

APP_URL="$1"

if [ -z "$APP_URL" ]; then
    echo "Usage: $0 <app-url>"
    exit 1
fi

echo "Starting load test to trigger alerts..."

# Generate high load to trigger response time alert
for i in {1..50}; do
    echo "Load test request $i..."
    curl -s "https://$APP_URL/load" > /dev/null &
    if [ $((i % 10)) -eq 0 ]; then
        wait  # Wait for batch to complete
    fi
done

wait  # Wait for all requests to complete

echo "Load test completed. Check your alerts in Azure Monitor!"
EOF

chmod +x load-test.sh

# Run the load test
./load-test.sh "$APP_URL"
Troubleshooting Tips
Common Issues and Solutions
Issue 1: No data appearing in Application Insights

Solution: Wait 5-10 minutes for data to appear. Data ingestion has a delay.
Check: Verify the instrumentation key is correctly configured.
Issue 2: Queries returning no results

Solution: Ensure you're querying the correct time range.
Check: Use | where timestamp > ago(1h) to limit to recent data.
Issue 3: Alerts not firing

Solution: Check that the metric conditions are realistic.
Check: Verify the action group is properly configured.
Issue 4: Dashboard not showing data

Solution: Refresh the dashboard and check the time range settings.
Check: Ensure the resources are properly connected.
Verification Commands
# Check if resources are created
az resource list --resource-group "monitoring-lab-rg" --output table

# Verify Application Insights is collecting data
az monitor app-insights events show \
    --app "monitoring-lab-insights" \
    --resource-group "monitoring-lab-rg" \
    --event-type requests

# Check alert rules
az monitor metrics alert list \
    --resource-group "monitoring-lab-rg" \
    --output table
Conclusion
Congratulations! You have successfully completed the Monitoring & Operations lab with Azure Monitor and Log Analytics. Here's what you accomplished:

Key Achievements
Monitoring Setup: You created a comprehensive monitoring solution using Azure Monitor and Application Insights, giving you visibility into your application's performance and health.

Custom Dashboards: You built custom dashboards that provide at-a-glance views of your system's key metrics, making it easy to spot trends and issues.

Alert Configuration: You set up automated alerts that will notify you when your applications need attention, enabling proactive problem resolution.

Log Analytics Mastery: You learned to write powerful queries using Kusto Query Language (KQL) to analyze log data and troubleshoot issues effectively.

Real-World Skills: You gained hands-on experience with industry-standard monitoring practices that are essential for maintaining reliable cloud applications.

Why This Matters
In today's digital world, applications must be available 24/7. The monitoring skills you've learned are crucial because:

Proactive Problem Solving: Instead of waiting for users to report issues, you can detect and fix problems before they impact users
Performance Optimization: By understanding how your applications perform, you can make them faster and more efficient
Cost Management: Monitoring helps identify resource waste and optimization opportunities
Compliance and Security: Many industries require detailed logging and monitoring for regulatory compliance
Next Steps
To continue building your monitoring expertise:

Explore Advanced Queries: Practice writing more complex KQL queries to analyze different types of data
Custom Metrics: Learn to create custom metrics specific to your applications
Integration: Explore how to integrate monitoring with CI/CD pipelines and automated responses
Multi-Cloud Monitoring: Investigate monitoring solutions that work across different cloud providers
Clean Up Resources
Remember to clean up your lab resources to avoid unnecessary charges:

# Delete the resource group and all resources
az group delete --name "monitoring-lab-rg" --yes --no-wait
You now have the foundation to implement robust monitoring solutions in any cloud environment. These skills will serve you well as you continue your journey in cloud operations and DevOps!l
